sudo code --user-data-dir="~/.vscode-root"
sudo systemctl start docker
sudo systemctl enable docker
systemctl list-units --type=service
https://slides.kubernetesmastery.com/#142

https://microk8s.io/

sudo snap install microk8s --classic
sudo snap install kubectl --classic
sudo microk8s.enable # Autostart on boot
sudo microk8s.start # Start right now
# Wait until microk8s has started
until microk8s.status ; do sleep 1 ; done
# Enable some standard modules
microk8s.enable dashboard registry istio

sudo snap install microk8s --classic
microk8s.kubectl 
echo "alias kubectl='microk8.kubectl'" >> ~/.bashrc
echo "alias kubectl='microk8.kubectl'" >> ~/.bash_aliases
microk8s.status
microk8s start
microk8s stop
microk8s enable dashboard dns registry istio
microk8s kubectl get all --all-namespaces
microk8s kubectl get nodes
microk8s kubectl get services
microk8s.kubectl cluster-info

alper@goodfellas:~$ alias k=microk8s.kubectl
alper@goodfellas:~$ k get nodes


microk8s.kubectl apply -f https://k8smastery.com/shpod.yaml

Create it with kubectl apply -f https://k8smastery.com/shpod.yaml

Attach to shell with kubectl attach --namespace=shpod -ti shpod

After finishing course kubectl delete -f https://k8smastery.com/shpod.yaml


k get nodes -o wide
k get no -o yaml

k explain node
k get services
k get svc

k get namespace
k get ns
k get pods --all-namespaces
k get pods -n kube-system


k -n kube-public get pods
k -n kube-public get configmaps


Which command shows all pods running on node "node1"?
k describe node node1


k run pingpong --image alpine ping 1.1.1.1
k get all

k logs pingpong
k scale pingpong --replicas 3  
k scale deployment pingpong --replicas 3

k logs pingpong --tail 1 --follow
 k delete pod pingpong


k run --schedule="* /3 * * *" --restart=OnFailure --image=alpine sleep 10
k get cronjobs


k create deployment
k scale deployment pingpong --replicas=8
k create job
k create cronjob

k create -f foo.yaml
k apply -f foo.yaml



k get pods -w
k create deployment httpenv --image=bretfisher/httpenv
k scale deployment httpenv --replicas=10
k expose deployment httpenv --port 8888
k get service
k attach --namespace=shpod -ti shpod
IP=$(k get svc httpenv -o go-template --template '{{.spec.clusterIP}}')

k describe service httpenv
k get endpoints
k get endpoints httpenv -o yaml
k get pods -l app=httpenv -o wide
k delete deployment/httpenv service/httpenv


curl -o docker-compose.yml https://k8smastery.com/dockercoins-compose.yml
docker-compose up