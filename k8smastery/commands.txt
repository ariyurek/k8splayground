sudo code --user-data-dir="~/.vscode-root"
sudo systemctl start docker
sudo systemctl enable docker
systemctl list-units --type=service
https://slides.kubernetesmastery.com/#142

https://microk8s.io/

sudo snap install microk8s --classic
sudo snap install kubectl --classic
sudo microk8s.enable # Autostart on boot
sudo microk8s.start # Start right now
# Wait until microk8s has started
until microk8s.status ; do sleep 1 ; done
# Enable some standard modules
microk8s.enable dashboard registry istio

sudo snap install microk8s --classic
microk8s.kubectl 
echo "alias kubectl='microk8.kubectl'" >> ~/.bashrc
echo "alias kubectl='microk8.kubectl'" >> ~/.bash_aliases
microk8s.status
microk8s start
microk8s stop
microk8s enable dashboard dns registry istio
microk8s kubectl get all --all-namespaces
microk8s kubectl get nodes
microk8s kubectl get services
microk8s.kubectl cluster-info

alper@goodfellas:~$ alias k=microk8s.kubectl
alper@goodfellas:~$ k get nodes


microk8s.kubectl apply -f https://k8smastery.com/shpod.yaml

Create it with kubectl apply -f https://k8smastery.com/shpod.yaml

Attach to shell with kubectl attach --namespace=shpod -ti shpod

After finishing course kubectl delete -f https://k8smastery.com/shpod.yaml


k get nodes -o wide
k get no -o yaml

k explain node
k get services
k get svc

k get namespace
k get ns
k get pods --all-namespaces
k get pods -n kube-system


k -n kube-public get pods
k -n kube-public get configmaps


Which command shows all pods running on node "node1"?
k describe node node1


k run pingpong --image alpine ping 1.1.1.1
k get all

k logs pingpong
k scale pingpong --replicas 3  
k scale deployment pingpong --replicas 3

k logs pingpong --tail 1 --follow
 k delete pod pingpong


k run --schedule="* /3 * * *" --restart=OnFailure --image=alpine sleep 10
k get cronjobs


k create deployment
k scale deployment pingpong --replicas=8
k create job
k create cronjob

k create -f foo.yaml
k apply -f foo.yaml



k get pods -w
k create deployment httpenv --image=bretfisher/httpenv
k scale deployment httpenv --replicas=10
k expose deployment httpenv --port 8888
k get service
k attach --namespace=shpod -ti shpod
IP=$(k get svc httpenv -o go-template --template '{{.spec.clusterIP}}')

k describe service httpenv
k get endpoints
k get endpoints httpenv -o yaml
k get pods -l app=httpenv -o wide
k delete deployment/httpenv service/httpenv


curl -o docker-compose.yml https://k8smastery.com/dockercoins-compose.yml
docker-compose up


k create deployment redis --image=redis
k create deployment hasher --image=dockercoins/hasher:v0.1
k create deployment rng --image=dockercoins/rng:v0.1
k create deployment webui --image=dockercoins/webui:v0.1
k create deployment worker --image=dockercoins/worker:v0.1

k get deploy -w to watch deployment events
k logs deploy/rng
k logs deploy/worker

k expose deployment redis --port 6379
k expose deployment rng --port 80
k expose deployment hasher --port 80

k expose deploy/webui --type=NodePort --port=80
k get svc

k scale deployment worker --replicas=2

k create -f dockercoins.yaml --> create resources if they do not exist.If exist do not alter them
k apply -f dockercoins.yaml --> create resources if they do not exist.If exist update them

The manifest can contain multiple resources seperated by ----

k apply -f insecure-dashboard.yaml
k get svc  dashboard

minikube dashboard
microk8.enable dashboard  
kube web view
kube ops view


k get pods -l app=rng
k get pods --selector app=rng
k label pods -l app=rng enabled=yes
k edit service rng 


POD=$(kubectl get pod -l app=rng,pod-template-hash -o name)
kubectl logs --tail 1 --follow $POD

k create deployment web --image nginx -o yaml --dry-run

k explain pod.spec.volume

k explain pod.spec --recursive

dump yaml with k get -o yaml

k create deployment web --image=nginx -o yaml > web.yaml
k apply -f web.yaml --dry-run --validate=false -o yaml
k apply -f web.yaml --server-dry-run --validate=false -o yaml

maxunavailable %25, maxsurge %25
deployments,daemonsets,statefulsets
k rollout
k get pods -w
k get replicasets -w
k get deployments -W

k rollout status deploy worker
k rollout undo deploy worker
k rollout status deploy worker
k rollout history deployment worker
k describe replicasets -l app=worker | grep -A3 Annotations
k rollout undo deployment worker --to-revision=1
k edit deployment worker
k patch

git clone https://github.com/bretfisher/kubercoins

k apply -f . 

Get the clusterIP address of the rng service
k get svc rng
k get events -w
k get pords -w


https://github.com/bretfisher/redis-tini

https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/

https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/

k create configmap my-app-config --from-file=app.conf

curl -O https://k8smastery.com/haproxy.cfg
k create configmap haproxy --from-file=haproxy.cfg
k get configmap haproxy -o yaml

k get ingress

--load balancer
k apply -f https://k8smastery.com/ic-nginx-lb.yaml
--host network
k apply -f https://k8smastery.com/ic-nginx-hn.yaml

check pod status
k describe -n ingress-nginx deploy/nginx-ingress-controller

nip.io dns

curl -O https://k8smastery.com/ingress.yaml

k get ingress
k describe ingress cheddar
k get ingress/stilton -o yaml